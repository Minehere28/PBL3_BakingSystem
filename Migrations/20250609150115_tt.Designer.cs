// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PBL3.Data;

#nullable disable

namespace PBL3.Migrations
{
    [DbContext(typeof(BMContext))]
    [Migration("20250609150115_tt")]
    partial class tt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFrozen")
                        .HasColumnType("bit");

                    b.Property<string>("Sdt")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountId");

                    b.HasIndex("Sdt");

                    b.ToTable("BankAccounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("BankAccount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PBL3.Entities.Trans", b =>
                {
                    b.Property<decimal>("TransactionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromAccountId")
                        .HasColumnType("int");

                    b.Property<double>("ReceiverBalanceAfter")
                        .HasColumnType("float");

                    b.Property<double>("SenderBalanceAfter")
                        .HasColumnType("float");

                    b.Property<int?>("ToAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("ToAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PBL3.Entities.User", b =>
                {
                    b.Property<string>("Sdt")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hoten")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NS")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Sdt");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PBL3.Entities.LoanAccount", b =>
                {
                    b.HasBaseType("BankAccount");

                    b.Property<double>("CurrentLoan")
                        .HasColumnType("float");

                    b.Property<double>("LatePaymentInterestRate")
                        .HasColumnType("float");

                    b.Property<double>("LoanLimit")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Loan");
                });

            modelBuilder.Entity("PBL3.Entities.RegularAccount", b =>
                {
                    b.HasBaseType("BankAccount");

                    b.Property<double>("MonthlyFee")
                        .HasColumnType("float");

                    b.Property<double>("TransactionFee")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Regular");
                });

            modelBuilder.Entity("PBL3.Entities.SavingAccount", b =>
                {
                    b.HasBaseType("BankAccount");

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<double>("MinimumBalance")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("Saving");
                });

            modelBuilder.Entity("BankAccount", b =>
                {
                    b.HasOne("PBL3.Entities.User", "user")
                        .WithMany("BankAccounts")
                        .HasForeignKey("Sdt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("PBL3.Entities.Trans", b =>
                {
                    b.HasOne("BankAccount", "FromAccount")
                        .WithMany("SentTransactions")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BankAccount", "ToAccount")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("BankAccount", b =>
                {
                    b.Navigation("ReceivedTransactions");

                    b.Navigation("SentTransactions");
                });

            modelBuilder.Entity("PBL3.Entities.User", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
